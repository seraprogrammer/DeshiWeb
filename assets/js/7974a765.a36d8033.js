"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5989],{2195:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=i(4848),n=i(8453);const o={sidebar_position:15},s="ForLoop Attribute",d={id:"Directives/for",title:"ForLoop Attribute",description:"The $for directive is used for rendering lists of items dynamically.",source:"@site/docs/Directives/for.md",sourceDirName:"Directives",slug:"/Directives/for",permalink:"/docs/Directives/for",draft:!1,unlisted:!1,editUrl:"https://github.com/DeshiJS/DeshiJS/docs/Directives/for.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Attr Attribute",permalink:"/docs/Directives/attr"},next:{title:"format Attribute",permalink:"/docs/Directives/format"}},a={},c=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"forloop-attribute",children:"ForLoop Attribute"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"$for"})," directive is used for rendering lists of items dynamically."]}),"\n",(0,r.jsx)(t.h1,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",metastring:'title="~index.html"',children:'<ul>\r\n  <li $for="item in items">{item}</li>\r\n</ul>\n'})}),"\n",(0,r.jsx)(t.h1,{id:"how-it-works",children:"How it Works"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The framework parses the $for expression to identify the item variable and\r\nthe array."}),"\n",(0,r.jsx)(t.li,{children:"It creates a comment node as a placeholder in the DOM."}),"\n",(0,r.jsx)(t.li,{children:"The original template element is removed from the DOM."}),"\n",(0,r.jsx)(t.li,{children:"For each item in the array, a clone of the template is created and inserted."}),"\n",(0,r.jsx)(t.li,{children:"The framework sets up a watcher on the array."}),"\n",(0,r.jsx)(t.li,{children:"When the array changes, the list is re-rendered."}),"\n"]}),"\n",(0,r.jsx)(t.h1,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(t.p,{children:"If the specified array doesn't exist, an empty list might be rendered, and an error could be logged to the console."}),"\n",(0,r.jsx)(t.h1,{id:"note",children:"Note"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"This directive efficiently handles the rendering of dynamic lists, automatically updating the DOM when the underlying data changes."})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>d});var r=i(6540);const n={},o=r.createContext(n);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);